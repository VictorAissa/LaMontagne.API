@startuml

package "model" {
    enum Season {
        SUMMER
        WINTER
    }

    enum Sky {
        SUNNY
        PARTLY_CLOUDY
        CLOUDY
        SNOW
        RAIN
    }

    enum Direction {
        N
        NE
        E
        SE
        S
        SW
        W
        NW
    }

    class GeoPoint {
        -Double lat
        -Double long
    }

    class Itinerary {
        -GeoPoint start
        -GeoPoint end
        -String gpx
    }

    class Altitudes {
        -Integer max
        -Integer min
        -Integer total
    }

    class Temperature {
        -Integer top
        -Integer bottom
    }

    class Iso {
        -Integer night
        -Integer day
    }

    class Wind {
        -Direction direction
        -Integer speed
    }

    class Meteo {
        -Sky sky
        -Temperature temperature
        -Iso iso
        -Wind wind
        -Integer bera
    }

    class Rope {
        -Double diameter
        -Integer length
    }

    class Protections {
        -List<Rope> ropes
        -Integer nuts
        -List<Double> cams
        -Integer screws
    }

    class Journey {
        -@Id String id
        -String title
        -Date date
        -String userId
        -Season season
        -List<String> members
        -List<String> pictures
        -Itinerary itinerary
        -Altitudes altitudes
        -Meteo meteo
        -Protections protections
        -String miscellaneous
    }

    class JourneyDTO {
        -String id
        -String title
        -Date date
        -String userId
        -Season season
        -List<String> members
        -List<String> pictures
        -Itinerary itinerary
        -Altitudes altitudes
        -Meteo meteo
        -Protections protections
        -String miscellaneous
    }

    class User {
        -@Id String id
        -String email
        -String password
        -String name
    }

    class UserDTO {
        -String id
        -String email
        -String password
        -String name
    }

    ' Model relationships
    Journey --> Season
    Journey --> Itinerary
    Journey --> Altitudes
    Journey --> Meteo
    Journey --> Protections
    
    Itinerary --> GeoPoint : start, end
    Meteo --> Sky
    Meteo --> Temperature
    Meteo --> Iso
    Meteo --> Wind
    Wind --> Direction
    Protections --> Rope
}

package "repository" {
    interface JourneyRepository {
        +findAll(): List<Journey>
        +findById(String id): Optional<Journey>
        +findAllByUserId(String userId): List<Journey>
        +findByDateAfterAndUserId(Date date, String userId): List<Journey>
        +findByDateBeforeAndUserId(Date date, String userId): List<Journey>
        +save(Journey journey): Journey
        +delete(String id): void
    }

    interface UserRepository {
        +findByEmail(String email): Optional<User>
        +save(User user): User
    }

    class MongoJourneyRepository {
    }

    class MongoUserRepository {
    }

    interface RepositoryFactory {
        +getJourneyRepository(): JourneyRepository
        +getUserRepository(): UserRepository
    }

    class DefaultRepositoryFactory {
        +getJourneyRepository(): JourneyRepository
        +getUserRepository(): UserRepository
    }
}

package "service" {
    interface JourneyService {
        +getAllJourneys(String userId): List<JourneyDTO>
        +getJourneyById(String id, String userId): JourneyDTO
        +createJourney(JourneyDTO journey, MultipartFile[] files, String userId): JourneyDTO
        +updateJourney(String id, JourneyDTO journey, MultipartFile[] files, String userId): JourneyDTO
        +deleteJourney(String id, String userId): void
        +void deleteFiles(String journeyId, List<String> fileUrls);
        +getPlannedJourneys(String userId): List<JourneyDTO>
        +getPastJourneys(String userId): List<JourneyDTO>
    }

    interface UserService {
        +authenticate(String email, String password): String
        +register(UserDTO user): UserDTO
    }

    interface CloudinaryService {
        +uploadImage(byte[] image): String
        +uploadGpx(byte[] gpx): String
        +deleteFile(String publicId): void
        +extractPublicId(String cloudinaryUrl): String
    }

    class JourneyServiceImpl {
        -JourneyRepository journeyRepository
        -CloudinaryService cloudinaryService

        -toDto(Journey journey): JourneyDTO
        -toPojo(JourneyDTO journeyDto): Journey
    }

    class UserServiceImpl {
        -UserRepository userRepository
    }

    class CloudinaryServiceImpl {
        -Cloudinary cloudinary
    }
}

package "controller" {
    class JourneyController {
        -JourneyService journeyService
        +getAllJourneys(String userId): List<JourneyDTO>
        +getJourneyById(String id, HttpServletRequest request): JourneyDTO
        +createJourney(JourneyDTO journey, MultipartFile[] files, HttpServletRequest request): JourneyDTO
        +updateJourney(JourneyDTO journey, MultipartFile[] files, HttpServletRequest request): JourneyDTO
        +deleteJourney(String id, HttpServletRequest request): void
        +deleteFiles(String id, List<String> fileUrls): void
        +uploadFiles(String id, MultipartFile[] files): void
    }

    class UserController {
        -UserService userService
        +login(LoginRequest req): String
        +register(UserDTO user): UserDTO
    }
}

' Relationships
JourneyRepository <|.. MongoJourneyRepository
UserRepository <|.. MongoUserRepository
RepositoryFactory <|.. DefaultRepositoryFactory
JourneyService <|.. JourneyServiceImpl
UserService <|.. UserServiceImpl
CloudinaryService <|.. CloudinaryServiceImpl

DefaultRepositoryFactory ..> MongoJourneyRepository
DefaultRepositoryFactory ..> MongoUserRepository

JourneyServiceImpl --> JourneyRepository
JourneyServiceImpl --> CloudinaryService
UserServiceImpl --> UserRepository

JourneyController --> JourneyService
UserController --> UserService

@enduml
